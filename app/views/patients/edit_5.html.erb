<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Ninkatec Onboarding | Environmental Analysis</title>
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <!-- Application CSS -->
  <%= stylesheet_link_tag "application", media: "all", "data-turbo-track": "reload" %>
  <style>
    .container {
      max-width: 800px;
    }
    .circular-button {
      border-radius: 50%;
      width: 40px;
      height: 40px;
    }
    .btn-blue {
      background-color: #253255;
      color: white;
    }
    .btn-outline-blue {
      border-color: #253255;
      color: #253255;
    }
    .btn-green {
      background-color: green;
      color: white;
    }
    .steps .page {
      display: flex;
      justify-content: space-between;
      margin-bottom: 1rem;
    }
    .step {
      display: flex;
      flex-direction: column;
      align-items: center;
      text-align: center;
    }
    .step-label {
      margin-top: 0.5rem;
      font-size: 18px;
    }
    .video-preview {
      margin-top: 20px;
    }
    /* Container for centering the loader */
    #loadingIndicator {
      position: fixed; /* Fixed position to stay in place while scrolling */
      top: 50%; /* Center vertically */
      left: 50%; /* Center horizontally */
      transform: translate(-50%, -50%); /* Adjust for exact center */
      z-index: 1000; /* Ensure it appears above other content */
    }

    /* Content wrapper to center the dot */
    .loading-content {
      display: flex;
      align-items: center;
      justify-content: center;
    }

    /* Pulsing dot loader */
    .pulsing-dot {
      position: absolute;
      width: 200px;
      height: 200px;
      background-color: #3498db;
      border-radius: 50%;
      animation: pulse 1.5s infinite ease-in-out;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    /* Loading text */
    .loading-text {
      color: #000000; /* Set text color for contrast */
      font-size: 30px;
      font-weight: bold;
      text-align: center;
    }

    /* Pulse animation */
    @keyframes pulse {
      0% {
        transform: scale(1);
        opacity: 1;
      }
      50% {
        transform: scale(1.5);
        opacity: 0.5;
      }
      100% {
        transform: scale(1);
        opacity: 1;
      }
    }
  </style>
</head>
<body>
  <div class="container mt-5">
    <!-- Steps Bar -->
    <div class="steps">
      <div class="page">
        <div class="step">
          <%= button_to '1', @form.persisted? ? edit_1_form_path(@form) : edit_1_forms_path, method: :get, class: @form.persisted? ? @valid_button_classes[0] : "btn btn-primary circular-button btn-outline-blue" %>
          <p class="step-label">Patient Details</p>
        </div>
        <div class="step">
          <%= button_to '2', @form.persisted? ? edit_2_form_path(@form) : edit_2_forms_path, method: :get, class: @form.persisted? ? @valid_button_classes[1] : "btn btn-primary circular-button btn-outline-blue" %>
          <p class="step-label">Medical Conditions</p>
        </div>
        <div class="step">
          <%= button_to '3', @form.persisted? ? edit_3_form_path(@form) : edit_3_forms_path, method: :get, class: @form.persisted? ? @valid_button_classes[2] : "btn btn-primary circular-button btn-outline-blue" %>
          <p class="step-label">Service Required</p>
        </div>
        <div class="step">
          <%= button_to '4', @form.persisted? ? edit_4_form_path(@form) : edit_4_forms_path, method: :get, class: @form.persisted? ? @valid_button_classes[3] : "btn btn-primary circular-button btn-outline-blue" %>
          <p class="step-label">Patient Assessment</p>
        </div>
        <div class="step">
          <button type="button" class="btn btn-primary circular-button btn-blue">5</button>
          <p class="step-label">Home Assessment</p>
        </div>
        <div class="step">
          <%= button_to '6', @form.persisted? ? @form : show_error_forms_path, method: :get, class: @form.persisted? ? @valid_button_classes[5] : "btn btn-primary circular-button btn-outline-blue" %>
          <p class="step-label">Summary Page</p>
        </div>
      </div>
    </div>

    <!-- Title -->
    <h1 class="text-center mb-4">Page 5 - Environmental Analysis</h1>
    <div id="loadingIndicator" class="loading-container" style="display: None;">
      <div class="loading-content">
        <div class="pulsing-dot"></div>
        <div class="loading-text">Uploading...</div>
      </div>
    </div>

    <!-- Video Upload Section -->
    <%= form_with(model: @form, url: @form.persisted? ? edit_5_form_path(@form) : edit_5_forms_path, method: @form.persisted? ? :patch : :post, local: true, html: { multipart: true }) do |form| %>
    <input type="hidden" name="form[id]" value="<%= @form.id %>">
      <%# <div class="row justify-content-center">
      <div class="box text-center">
        <p>Take a video from your house doorstep including the Living Room, Bedroom, and Toilet. The video should show the patient moving around the house as they would daily.</p>
        <div class="video-preview">
          <iframe class="rounded-video" width="70%" height="300" src="https://www.youtube.com/embed/BbqtjDekrWc" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
        </div> %>
      <div class="row">

        <!-- Step 1: Environment Video -->
        <div class="box-video g-5">
          <hr/>
          <h2>Upload Environmental Video<span style="color: red;"> *</span></h2>
            Film a video from your house doorstep including the Living Room, Bedroom, and Toilet.

          <div class="video-preview" style="margin-top: 20px;">
              <iframe class="rounded-video" width="70%" height="300" 
                      src="https://www.youtube.com/embed/BbqtjDekrWc" 
                      frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" 
                      allowfullscreen>
              </iframe>
          </div>
          <p class="mt-3", style="text-align: center">
            The video should show the patient moving around the house as they would daily.
          </p>
          <%= form.file_field :environment_video, accept: 'video/*', class: 'form-control mb-3', id: 'environment_video'%>
          <%= form.submit 'Upload', name: 'commit', value: 'Upload Environment Video', class: 'btn btn-primary', id: 'uploadEnvironmentVideoButton' %>
          <div class=" text-center">
            <% if @form.environment_video_file_name.present? %>
              <% gcs_service = GoogleCloudStorageService.new %>
              <% signed_url = gcs_service.generate_signed_url_for_viewing(@form.environment_video_file_name) %>
            <div class="video-container text-center mt-3">
                  <p>Environment Video Uploaded:</p>
                  <%= video_tag signed_url, controls: true, class: "img-thumbnail video-preview rounded-video" %>
            </div>

            <% end %>
          </div>
        </div>

      <div class="modal fade" id="invalidFormModal" tabindex="-1" aria-labelledby="invalidFormModalLabel" aria-hidden="true">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="invalidFormModalLabel">Form Incomplete</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              Please fill up all required forms.
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
          </div>
        </div>
      </div>

      <!-- Navigation Buttons -->
      <div class="d-flex justify-content-between mt-5 mb-5">
        <%= link_to "Back", @form.persisted? ? edit_4_form_path(@form) : edit_4_forms_path, class: "btn btn-lg btn-outline-black rounded-pill" %>
        <div>
          <%= form.submit "Save", name: "commit", value: "Save", class: "btn btn-lg rounded-pill btn-green me-2", id: 'saveButton' %>
          <%= form.submit "Next", name: 'commit', value: 'Next', class: "btn btn-lg btn-blue rounded-pill", id: 'nextButton' %>
        </div>
      </div>
    <% end %>
  </div>

  <!-- Bootstrap Bundle JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
  <script>
      document.addEventListener('DOMContentLoaded', function() {
          function showLoading() {
            document.getElementById('loadingIndicator').style.display = 'block';
            console.log("SHOWING)")
          }

          function hideLoading() {
            document.getElementById('loadingIndicator').style.display = 'none';
            console.log("HIDING)")
          }
        document.getElementById('uploadEnvironmentVideoButton').addEventListener('click', function(event) {
          event.preventDefault();
          showLoading();
          const formIdInput = document.querySelector('input[name="form[id]"]');
          const formId = formIdInput ? formIdInput.value : '';
          handleFileUpload(event, 'environment_video', formId, 'Upload Environment Video')
          .then(result => {
            hideLoading();
            if (result.success) {
              if (result.isNewForm){
                window.location.href = `/forms/${result.formId}/edit_5`;
              }else{
              window.location.reload();
              }
            }
          });
        });

        document.getElementById('saveButton').addEventListener('click', function(event) {
          event.preventDefault();
          showLoading();
          const formIdInput = document.querySelector('input[name="form[id]"]');
          let formId = formIdInput ? formIdInput.value : '';
          console.log(formId)
          handleFileUpload(event, 'environment_video', formId, 'Upload Environment Video')
          .then(result => {
            hideLoading();
            if (result.success) {
              if (result.isNewForm){
                window.location.href = `/forms/${result.formId}/edit_5`;
              }else{
              window.location.reload();
              }
            }
          });
        });

          document.getElementById('nextButton').addEventListener('click', function(event) {
            event.preventDefault();
            showLoading

            const formIdInput = document.querySelector('input[name="form[id]"]');
            let formId = formIdInput ? formIdInput.value : '';
            console.log(formId)
            handleFileUpload(event, 'environment_video', formId, 'Upload Environment Video')
            .then(result => {
              hideLoading();
              if (result.success) {
                window.location.href = `/forms/${result.formId}`
              } else if (result.formId != '' || formId != ''){
                window.location.href = `/forms/${result.formId}`
              } else {
                window.location.href = `/forms/show_error`
              }
            });
          });
        });
    async function handleFileUpload(event, videoId, formId, changes) {
      event.preventDefault(); // Prevent the form from submitting normally

      const fileInput = document.getElementById(videoId);
      const file = fileInput.files[0];
      let isNewForm = false;

      if (!file) {
        console.log("No file selected.");
        return { success: false, formId: formId };;
      }

      if (!formId) {
        
        console.log("Form ID is missing.");
        try {
          formId = await createNewForm();
          isNewForm = true;
        } catch (error) {
          // Handle form creation failure
          return { success: false, message: 'Failed to create new form' };
        }
      }
      const fileName = `form_${formId}_${videoId}`; // Customize the file name
      const contentType = file.type;

      console.log(contentType);

      // Request a signed URL from Rails
      const response = await fetch(`/forms/${formId}/generate_signed_url`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
        },
        body: JSON.stringify({ filename: fileName, content_type: contentType })
      });

      const data = await response.json();
      const uploadUrl = data.url;

      if (!uploadUrl) {
        console.error("Failed to get upload URL.");
        return;
      }

      // Upload the file to GCS using the signed URL
      const uploadResponse = await fetch(uploadUrl, {
        method: 'PUT',
        headers: {
          'Content-Type': contentType
        },
        body: file
      });

      if (uploadResponse.ok) {
        console.log("File uploaded successfully to GCS.");

        const patchResponse = await fetch(`/forms/${formId}/edit_5`, {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
          },
          body: JSON.stringify({ filename: fileName, changes: changes })
        });

        const patchData = await patchResponse.json();
        console.log(patchData);

        if (patchResponse.ok && patchData.success) {
          console.log(patchData.message);
          if (changes === 'Next') {
            window.location.href = `/forms/${formId}/edit_5`;
          }
          return { success: true, message: patchData.message, isNewForm: isNewForm, formId: formId };
        } else {
          console.error("Failed to update form:", patchData.message || patchData.error);
        }

      } else {
        console.error("Upload failed:", await uploadResponse.text());
      }

      // Helper function to create a new form
      async function createNewForm() {
        try {
          const response = await fetch('/forms/edit_5', {
            method: 'PATCH',
            headers: {
              'Content-Type': 'application/json',
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
            }
          });

          const data = await response.json();

          if (data.success) {
            return data.formId;
          } else {
            console.error('Failed to create form:', data.message);
            throw new Error(data.message);
          }
        } catch (error) {
          console.error('Error during form creation:', error);
          throw error;
        }
      }
    }
  </script>
</body>
</html>
